package main.model;

import java.io.InputStream;

/**
 * Game Class
 * Handles the game initialization, the main game loop and the ending condition
 */
public class Game {
    public enum Status {
        CHECKMATE, STALEMATE, CONTINUE
    }

    // Constants
    public final static int NUM_PLAYERS = 2;

    // Object Members
    private Player[] players;
    private Board board;
    private int currRound;
    private InputStream inputStream;

    /**
     * Constructor of Game by the names of the players and the input stream of user input
     * @param namePlayerWhite The name of Player White (0)
     * @param namePlayerBlack The name of Player Black (1)
     * @param inputStream The input stream that reads user input
     */
    public Game(String namePlayerWhite, String namePlayerBlack, InputStream inputStream) {
        players = generatePlayers(namePlayerWhite, namePlayerBlack);
        board = new Board(players, true);
        currRound = 0; // Player White(0)'s round first by default
        this.inputStream = inputStream;
    }

    /**
     * Getter of currRound
     * @return The current round number of this game
     */
    public int getCurrRound() {
        return currRound;
    }

    /**
     * Setter of players
     * @param players The players of this game
     */
    public void setPlayers(Player[] players) {
        this.players = players;
    }

    /**
     * Setter of board
     * @param board The board that records the status of this game
     */
    public void setBoard(Board board) {
        this.board = board;
    }

    /**
     * Generator of Players from their names, setting each other to be opponents
     * @param namePlayerWhite The name of Player White (0)
     * @param namePlayerBlack The name of Player Black (1)
     * @return The Players generated by their names
     */
    public static Player[] generatePlayers(String namePlayerWhite, String namePlayerBlack) {
        Player[] players = new Player[NUM_PLAYERS];
        players[0] = new Player(namePlayerWhite, 0);
        players[1] = new Player(namePlayerBlack, 1);
        players[0].setOpponent(players[1]);
        players[1].setOpponent(players[0]);
        return players;
    }

    /**
     * Starts the game
     * Includes the main game loop
     */
    public void start() {
        System.out.println(board.toString());

        Player currPlayer;
        do {
            currPlayer = players[currRound];
            Position[] positions = currPlayer.takeAction(inputStream); // 0: src, 1: dest
            if (positions == null) {
                System.out.println("No Input in the stream.");
                break;
            }
            if (!board.movePieceByPosition(currPlayer, positions[0], positions[1])) {
                System.out.println("Please try again.");
                continue;
            }
            currRound = (currRound + 1) % NUM_PLAYERS;
            System.out.println(board.toString());
        } while (!isEnding());
    }

    /**
     * Checks the ending condition of this game
     * @return True if a player is checkmated or stalemated
     */
    public boolean isEnding() {
        switch (board.isCheckmateOrStalemate(players[currRound])) {
            case CHECKMATE:
                System.out.println("Checkmate!");
                return true;
            case STALEMATE:
                System.out.println("Stalemate!");
                return true;
            default:
                return false;
        }
    }
}
